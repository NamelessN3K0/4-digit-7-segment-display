
TP3A1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071d  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064f  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cd  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000382  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000054  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  9e:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <write>:

void write(void){
	/************************************************************************/
	/* FUNÇÃO VOID PARA ESCRITA DOS DIGITOS NO DISPLAY                      */
	/************************************************************************/
	temp= counter;								//copia o valor do counter
  a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
  aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <counter+0x1>
  ae:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	sel0;										//desceleciona tudo no display
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	45 b9       	out	0x05, r20	; 5
	PORTD=conver[temp %10];						//converte o numero para a macro correspondente
  ba:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  be:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
  c2:	9f 01       	movw	r18, r30
  c4:	ad ec       	ldi	r26, 0xCD	; 205
  c6:	bc ec       	ldi	r27, 0xCC	; 204
  c8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	96 95       	lsr	r25
  d2:	87 95       	ror	r24
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
  d8:	9c 01       	movw	r18, r24
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	82 0f       	add	r24, r18
  ec:	93 1f       	adc	r25, r19
  ee:	9f 01       	movw	r18, r30
  f0:	28 1b       	sub	r18, r24
  f2:	39 0b       	sbc	r19, r25
  f4:	f9 01       	movw	r30, r18
  f6:	e0 50       	subi	r30, 0x00	; 0
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	8b b9       	out	0x0b, r24	; 11
	sel4;										//escreve a macro no 4 numero
  fe:	87 ef       	ldi	r24, 0xF7	; 247
 100:	85 b9       	out	0x05, r24	; 5
	temp= temp /10;
 102:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 106:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 10a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 11e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	sel0;										//desceleciona tudo no display
 122:	45 b9       	out	0x05, r20	; 5
	PORTD=conver[temp %10];						//converte o numero para a macro correspondente
 124:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 128:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 12c:	9f 01       	movw	r18, r30
 12e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	9c 01       	movw	r18, r24
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	82 0f       	add	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	9f 01       	movw	r18, r30
 156:	28 1b       	sub	r18, r24
 158:	39 0b       	sbc	r19, r25
 15a:	f9 01       	movw	r30, r18
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	8b b9       	out	0x0b, r24	; 11
	sel3;										//escreve a macro no 3 numero
 164:	8b ef       	ldi	r24, 0xFB	; 251
 166:	85 b9       	out	0x05, r24	; 5
	temp= temp /10;
 168:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 16c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 170:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 184:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	sel0;										//desceleciona tudo no display
 188:	45 b9       	out	0x05, r20	; 5
	PORTD=conver[temp %10];						//converte o numero para a macro correspondente
 18a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 18e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 192:	9f 01       	movw	r18, r30
 194:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	9c 01       	movw	r18, r24
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	9f 01       	movw	r18, r30
 1bc:	28 1b       	sub	r18, r24
 1be:	39 0b       	sbc	r19, r25
 1c0:	f9 01       	movw	r30, r18
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	8b b9       	out	0x0b, r24	; 11
	sel2;										//escreve a macro no 2 numero
 1ca:	8d ef       	ldi	r24, 0xFD	; 253
 1cc:	85 b9       	out	0x05, r24	; 5
	temp= temp /10;
 1ce:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 1d2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 1d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	sel0;										//desceleciona tudo no display
 1ee:	45 b9       	out	0x05, r20	; 5
	PORTD=conver[temp %10];						//converte o numero para a macro correspondente
 1f0:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 1f4:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x1>
 1f8:	9a 01       	movw	r18, r20
 1fa:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	96 95       	lsr	r25
 208:	87 95       	ror	r24
 20a:	9c 01       	movw	r18, r24
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	9a 01       	movw	r18, r20
 222:	28 1b       	sub	r18, r24
 224:	39 0b       	sbc	r19, r25
 226:	f9 01       	movw	r30, r18
 228:	e0 50       	subi	r30, 0x00	; 0
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	80 81       	ld	r24, Z
 22e:	8b b9       	out	0x0b, r24	; 11
	sel1;										//escreve a macro no 1 numero
 230:	8e ef       	ldi	r24, 0xFE	; 254
 232:	85 b9       	out	0x05, r24	; 5
	temp= temp /10;
 234:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 238:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 23c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 250:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 254:	08 95       	ret

00000256 <main>:
int main(void)
{
	/************************************************************************/
	/*  Funçao main (btns / write )                                         */
	/************************************************************************/
	DDRD = setDDRD;														//DDRD como output
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	8a b9       	out	0x0a, r24	; 10
	DDRB = setDDRB;														//DDRB como input e output
 25a:	8f e0       	ldi	r24, 0x0F	; 15
 25c:	84 b9       	out	0x04, r24	; 4
	
	char estadoBTN_UP = SOLTO;											//inicia o estado do btn_up como solto
	char estadoBTN_DOWN = SOLTO;										//inicia o estado do btn_down como solto
 25e:	d0 e0       	ldi	r29, 0x00	; 0
	/*  Funçao main (btns / write )                                         */
	/************************************************************************/
	DDRD = setDDRD;														//DDRD como output
	DDRB = setDDRB;														//DDRB como input e output
	
	char estadoBTN_UP = SOLTO;											//inicia o estado do btn_up como solto
 260:	c0 e0       	ldi	r28, 0x00	; 0
	char estadoBTN_DOWN = SOLTO;										//inicia o estado do btn_down como solto
	
	
	while (1)
	{
		if(BTN_UPisPressed){
 262:	1c 99       	sbic	0x03, 4	; 3
			estadoBTN_UP = PRESSED;										//altera o estado do btn_up para pressed
 264:	c1 e0       	ldi	r28, 0x01	; 1
		}
		if((BTN_UPisPressed) == SOLTO && estadoBTN_UP == PRESSED){		//BTN_UP (funcionamento)
 266:	1c 99       	sbic	0x03, 4	; 3
 268:	16 c0       	rjmp	.+44     	; 0x296 <main+0x40>
 26a:	c1 30       	cpi	r28, 0x01	; 1
 26c:	a1 f4       	brne	.+40     	; 0x296 <main+0x40>
			if(counter>=MAX){											//se counter >= maximo
 26e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 272:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <counter+0x1>
 276:	8f 30       	cpi	r24, 0x0F	; 15
 278:	27 e2       	ldi	r18, 0x27	; 39
 27a:	92 07       	cpc	r25, r18
 27c:	30 f0       	brcs	.+12     	; 0x28a <main+0x34>
				counter = MIN;											//passa para o minimo
 27e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <counter+0x1>
 282:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
			}
			else{counter++;}											//se nao incrementa o counter
			
			estadoBTN_UP=SOLTO;											//altera o estado do btn_up para solto
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	06 c0       	rjmp	.+12     	; 0x296 <main+0x40>
		}
		if((BTN_UPisPressed) == SOLTO && estadoBTN_UP == PRESSED){		//BTN_UP (funcionamento)
			if(counter>=MAX){											//se counter >= maximo
				counter = MIN;											//passa para o minimo
			}
			else{counter++;}											//se nao incrementa o counter
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <counter+0x1>
 290:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
			
			estadoBTN_UP=SOLTO;											//altera o estado do btn_up para solto
 294:	c0 e0       	ldi	r28, 0x00	; 0
		}
		if(BTN_DOWNisPressed){
 296:	1d 99       	sbic	0x03, 5	; 3
			estadoBTN_DOWN = PRESSED;									//altera o estado do btn_down para pressed
 298:	d1 e0       	ldi	r29, 0x01	; 1
		}
		if((BTN_DOWNisPressed) == SOLTO && estadoBTN_DOWN == PRESSED){	//BTN_DOWN (funcionamento)
 29a:	1d 99       	sbic	0x03, 5	; 3
 29c:	16 c0       	rjmp	.+44     	; 0x2ca <main+0x74>
 29e:	d1 30       	cpi	r29, 0x01	; 1
 2a0:	a1 f4       	brne	.+40     	; 0x2ca <main+0x74>
			if(counter<=MIN){											//se counter <= minimo
 2a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 2a6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <counter+0x1>
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	41 f4       	brne	.+16     	; 0x2be <main+0x68>
				counter = MAX;											//passa para o maximo
 2ae:	8f e0       	ldi	r24, 0x0F	; 15
 2b0:	97 e2       	ldi	r25, 0x27	; 39
 2b2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <counter+0x1>
 2b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
			}
			else{counter--;}											//se nao decrementa o counter
			estadoBTN_DOWN=SOLTO;										//altera o estado do btn_down para solto
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <main+0x74>
		}
		if((BTN_DOWNisPressed) == SOLTO && estadoBTN_DOWN == PRESSED){	//BTN_DOWN (funcionamento)
			if(counter<=MIN){											//se counter <= minimo
				counter = MAX;											//passa para o maximo
			}
			else{counter--;}											//se nao decrementa o counter
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <counter+0x1>
 2c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
			estadoBTN_DOWN=SOLTO;										//altera o estado do btn_down para solto
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		write();														//chama write() para ecrever no display
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <write>
	}
 2ce:	c9 cf       	rjmp	.-110    	; 0x262 <main+0xc>

000002d0 <__umulhisi3>:
 2d0:	a2 9f       	mul	r26, r18
 2d2:	b0 01       	movw	r22, r0
 2d4:	b3 9f       	mul	r27, r19
 2d6:	c0 01       	movw	r24, r0
 2d8:	a3 9f       	mul	r26, r19
 2da:	70 0d       	add	r23, r0
 2dc:	81 1d       	adc	r24, r1
 2de:	11 24       	eor	r1, r1
 2e0:	91 1d       	adc	r25, r1
 2e2:	b2 9f       	mul	r27, r18
 2e4:	70 0d       	add	r23, r0
 2e6:	81 1d       	adc	r24, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	91 1d       	adc	r25, r1
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
